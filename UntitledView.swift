//
// UntitledView.swift
// Generated by Core Animator version 1.3 on 8/5/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class UntitledView : UIView {

	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 500, height: 500))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:500, height:500)
		__scaling__.center = CGPoint(x:250.0, y:250.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let footL = UIImageView()
		footL.bounds = CGRect(x:0, y:0, width:464.0, height:406.0)
		var imgFoot: UIImage!
		if let imagePath = bundle.pathForResource("Foot.png", ofType:nil) {
			imgFoot = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Foot.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		footL.image = imgFoot
		footL.contentMode = .Center
		footL.layer.position = CGPoint(x:205.966, y:277.241)
		footL.transform = CGAffineTransformMakeScale(0.13, 0.13)
		__scaling__.addSubview(footL)
		viewsByName["FootL"] = footL

		let footR = UIImageView()
		footR.bounds = CGRect(x:0, y:0, width:464.0, height:406.0)
		footR.image = imgFoot
		footR.contentMode = .Center
		footR.layer.position = CGPoint(x:282.175, y:278.153)
		footR.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(3.14), -0.14, -0.14)
		__scaling__.addSubview(footR)
		viewsByName["FootR"] = footR

		let largeBody = UIImageView()
		largeBody.bounds = CGRect(x:0, y:0, width:1178.0, height:978.0)
		largeBody.layer.anchorPoint = CGPoint(x:0.497, y:0.481)
		var imgLargeBody: UIImage!
		if let imagePath = bundle.pathForResource("LargeBody.png", ofType:nil) {
			imgLargeBody = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'LargeBody.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		largeBody.image = imgLargeBody
		largeBody.contentMode = .Center
		largeBody.layer.position = CGPoint(x:249.257, y:185.372)
		largeBody.transform = CGAffineTransformMakeScale(0.19, 0.19)
		__scaling__.addSubview(largeBody)
		viewsByName["LargeBody"] = largeBody

		let lion = UIImageView()
		lion.bounds = CGRect(x:0, y:0, width:80.0, height:80.0)
		var imgLion: UIImage!
		if let imagePath = bundle.pathForResource("Lion.png", ofType:nil) {
			imgLion = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Lion.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		lion.image = imgLion
		lion.contentMode = .Center
		lion.layer.position = CGPoint(x:251.000, y:99.182)
		lion.transform = CGAffineTransformMakeScale(2.78, 2.78)
		__scaling__.addSubview(lion)
		viewsByName["Lion"] = lion

		self.viewsByName = viewsByName
	}

	// - MARK: Standing

	func addStandingAnimation() {
		addStandingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addStandingAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addStandingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addStandingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)

		let footRTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		footRTranslationYAnimation.duration = 1.150
		footRTranslationYAnimation.values = [0.000 as Float, -10.000 as Float, 0.000 as Float]
		footRTranslationYAnimation.keyTimes = [0.000 as Float, 0.348 as Float, 1.000 as Float]
		footRTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		footRTranslationYAnimation.repeatCount = HUGE
		footRTranslationYAnimation.beginTime = beginTime
		footRTranslationYAnimation.fillMode = fillMode
		footRTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["FootR"]?.layer.addAnimation(footRTranslationYAnimation, forKey:"Standing_TranslationY")

		let largeBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		largeBodyRotationAnimation.duration = 0.950
		largeBodyRotationAnimation.values = [0.000 as Float, 0.000 as Float, -0.035 as Float, -0.002 as Float]
		largeBodyRotationAnimation.keyTimes = [0.000 as Float, 0.174 as Float, 0.526 as Float, 1.000 as Float]
		largeBodyRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		largeBodyRotationAnimation.repeatCount = HUGE
		largeBodyRotationAnimation.beginTime = beginTime
		largeBodyRotationAnimation.fillMode = fillMode
		largeBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyRotationAnimation, forKey:"Standing_Rotation")

		let largeBodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		largeBodyTranslationXAnimation.duration = 0.500
		largeBodyTranslationXAnimation.values = [0.000 as Float, 0.198 as Float, -1.000 as Float]
		largeBodyTranslationXAnimation.keyTimes = [0.000 as Float, 0.802 as Float, 1.000 as Float]
		largeBodyTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		largeBodyTranslationXAnimation.repeatCount = HUGE
		largeBodyTranslationXAnimation.beginTime = beginTime
		largeBodyTranslationXAnimation.fillMode = fillMode
		largeBodyTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyTranslationXAnimation, forKey:"Standing_TranslationX")

		let largeBodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		largeBodyTranslationYAnimation.duration = 1.000
		largeBodyTranslationYAnimation.values = [0.000 as Float, -3.010 as Float, -5.000 as Float, 0.000 as Float]
		largeBodyTranslationYAnimation.keyTimes = [0.000 as Float, 0.290 as Float, 0.500 as Float, 1.000 as Float]
		largeBodyTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		largeBodyTranslationYAnimation.repeatCount = HUGE
		largeBodyTranslationYAnimation.beginTime = beginTime
		largeBodyTranslationYAnimation.fillMode = fillMode
		largeBodyTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyTranslationYAnimation, forKey:"Standing_TranslationY")

		let lionRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		lionRotationAnimation.duration = 0.700
		lionRotationAnimation.values = [0.000 as Float, 0.004 as Float, -0.020 as Float, 0.004 as Float]
		lionRotationAnimation.keyTimes = [0.000 as Float, 0.537 as Float, 0.757 as Float, 1.000 as Float]
		lionRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lionRotationAnimation.repeatCount = HUGE
		lionRotationAnimation.beginTime = beginTime
		lionRotationAnimation.fillMode = fillMode
		lionRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Lion"]?.layer.addAnimation(lionRotationAnimation, forKey:"Standing_Rotation")

		let lionTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lionTranslationXAnimation.duration = 0.680
		lionTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -1.000 as Float, 0.000 as Float]
		lionTranslationXAnimation.keyTimes = [0.000 as Float, 0.590 as Float, 0.779 as Float, 1.000 as Float]
		lionTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lionTranslationXAnimation.repeatCount = HUGE
		lionTranslationXAnimation.beginTime = beginTime
		lionTranslationXAnimation.fillMode = fillMode
		lionTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Lion"]?.layer.addAnimation(lionTranslationXAnimation, forKey:"Standing_TranslationX")

		let lionTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lionTranslationYAnimation.duration = 0.680
		lionTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, -2.000 as Float, 0.000 as Float]
		lionTranslationYAnimation.keyTimes = [0.000 as Float, 0.590 as Float, 0.779 as Float, 1.000 as Float]
		lionTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lionTranslationYAnimation.repeatCount = HUGE
		lionTranslationYAnimation.beginTime = beginTime
		lionTranslationYAnimation.fillMode = fillMode
		lionTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Lion"]?.layer.addAnimation(lionTranslationYAnimation, forKey:"Standing_TranslationY")
	}

	func removeStandingAnimation() {
		self.viewsByName["FootR"]?.layer.removeAnimationForKey("Standing_TranslationY")
		self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_Rotation")
		self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_TranslationX")
		self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_TranslationY")
		self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_Rotation")
		self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_TranslationX")
		self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_TranslationY")
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
	}
}