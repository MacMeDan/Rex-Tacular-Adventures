//
// CrateAnimationsView.swift
// Generated by Core Animator version 1.3 on 7/31/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit


class CrateAnimationsView : UIView {
    var fullCrate = UIView()
    var dancingAnimal = DancingAnimalView()
	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}

	}

	// - MARK: Setup


	func setupHierarchy() {
        getRandomAnimal()
        fullCrate = UIView()
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1136, height:768)
		__scaling__.center = CGPoint(x:568.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		fullCrate.bounds = CGRect(x:0, y:0, width:528.7, height:528.0)
		fullCrate.layer.position = CGPoint(x:652.918, y:400.078)
		__scaling__.addSubview(fullCrate)
		viewsByName["fullCrate"] = fullCrate
		let opencrate = UIImageView()
		opencrate.bounds = CGRect(x:0, y:0, width:527.0, height:528.0)
		var imgOpencrate: UIImage!
		if let imagePath = bundle.pathForResource("Opencrate.png", ofType:nil) {
			imgOpencrate = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Opencrate.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		opencrate.image = imgOpencrate
		opencrate.contentMode = .Center
		opencrate.layer.position = CGPoint(x:265.242, y:264.000)
		fullCrate.addSubview(opencrate)
		viewsByName["Opencrate"] = opencrate

        let animalViews = dancingAnimal.setupDancingAnimal()
        fullCrate.addSubview(dancingAnimal)
        let door = UIImageView()
		door.bounds = CGRect(x:0, y:0, width:511.0, height:497.0)
		door.layer.anchorPoint = CGPoint(x:-0.003, y:0.500)
		var imgDoor: UIImage!
		if let imagePath = bundle.pathForResource("Door.png", ofType:nil) {
			imgDoor = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Door.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		door.image = imgDoor
		door.contentMode = .Center
		door.layer.position = CGPoint(x:-1.711, y:271.598)
		fullCrate.addSubview(door)
		viewsByName["Door"] = door

		self.viewsByName = viewsByName
	}

	// - MARK: Close

	func addCloseAnimation() {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseAnimation(completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let anticipateTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 1.00, 1.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Close")
			self.animationCompletions[layer.animationForKey("Close")!] = complete
		}

		let doorScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		doorScaleXAnimation.duration = 0.500
		doorScaleXAnimation.values = [-0.292 as Float, 0.999 as Float]
		doorScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorScaleXAnimation.timingFunctions = [anticipateTiming]
		doorScaleXAnimation.beginTime = beginTime
		doorScaleXAnimation.fillMode = fillMode
		doorScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorScaleXAnimation, forKey:"Close_ScaleX")

		let doorTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		doorTranslationXAnimation.duration = 0.500
		doorTranslationXAnimation.values = [2.211 as Float, 0.001 as Float]
		doorTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorTranslationXAnimation.timingFunctions = [anticOverTiming]
		doorTranslationXAnimation.beginTime = beginTime
		doorTranslationXAnimation.fillMode = fillMode
		doorTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorTranslationXAnimation, forKey:"Close_TranslationX")
	}

	func removeCloseAnimation() {
		self.layer.removeAnimationForKey("Close")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Close_ScaleX")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Close_TranslationX")
	}

	// - MARK: Open

	func addOpenAnimation() {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
        dancingAnimal.addStandingAnimation()
	}

	func addOpenAnimation(completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
        dancingAnimal.addStandingAnimation()
	}

	func addOpenAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addOpenAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addOpenAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Open")
			self.animationCompletions[layer.animationForKey("Open")!] = complete
		}

		let doorScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		doorScaleXAnimation.duration = 0.500
		doorScaleXAnimation.values = [1.000 as Float, -0.292 as Float]
		doorScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorScaleXAnimation.timingFunctions = [overshootTiming]
		doorScaleXAnimation.beginTime = beginTime
		doorScaleXAnimation.fillMode = fillMode
		doorScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorScaleXAnimation, forKey:"Open_ScaleX")

		let doorTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		doorTranslationXAnimation.duration = 0.500
		doorTranslationXAnimation.values = [0.000 as Float, 2.211 as Float]
		doorTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorTranslationXAnimation.timingFunctions = [easeInOutTiming]
		doorTranslationXAnimation.beginTime = beginTime
		doorTranslationXAnimation.fillMode = fillMode
		doorTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorTranslationXAnimation, forKey:"Open_TranslationX")
	}

	func removeOpenAnimation() {
		self.layer.removeAnimationForKey("Open")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Open_ScaleX")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Open_TranslationX")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Close")
		self.layer.removeAnimationForKey("Open")
	}


}
