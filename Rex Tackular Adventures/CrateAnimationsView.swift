//
// CrateAnimationsView.swift
// Generated by Core Animator version 1.3 on 7/31/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class CrateAnimationsView : UIView {
    var animal: Animal!
    var fullCrate = UIView()
    var dancingAnimal = UIView()
	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 768))

	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

    func reset() {
        setupHierarchy()
    }

    //Image Helpers

    func getNewAnimal() {
        animal = getRandomAnimal()
    }

    func getFootImageFor(animal: Animal) -> UIImage {
        switch animal {
        case .Cat:
            guard let theImage = UIImage(named: "FelineFoot") else { assertionFailure("No FelineFoot Image for \(animal.rawValue)"); return UIImage() }
            return theImage
        default:
            guard let theImage = UIImage(named: "Foot") else { assertionFailure("No Image for \(animal.rawValue)Foot")
                return UIImage()
            }
            return theImage
        }
    }

    func getBodyImageFor(animal: Animal) -> UIImage {
        guard let defaultImage =  UIImage(named: "LargeBody") else { assertionFailure("No Image for \(animal.rawValue)Body"); return UIImage() }
        if let image = UIImage(named: "\(animal.rawValue)Body") {
            return image
        } else { return defaultImage }
    }

    func getHeadImageFor(animal: Animal) -> UIImage {
        if let image = UIImage(named: "\(animal.rawValue)") {
            return image
        } else { return UIImage() }
    }

    func getArmImageFor(animal: Animal) -> UIImage {
        guard let image = UIImage(named: "\(animal.rawValue)Arm") else { assertionFailure("No Image for \(animal.rawValue)Arm"); return UIImage() }
        return image
    }

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}

	}

	// - MARK: Setup

    func setupDancingAnimal(var viewsByName: [String : UIView]) -> [String : UIView] {
        dancingAnimal = UIView()
        getNewAnimal()

        let footL = UIImageView()
        footL.bounds = CGRect(x:0, y:0, width:464.0, height:406.0)
        let image = UIImage(named: "Foot")
        footL.image = image
        footL.contentMode = .Center
        footL.layer.position = CGPoint(x:205.966, y:277.241)
        footL.transform = CGAffineTransformMakeScale(0.13, 0.13)
        dancingAnimal.addSubview(footL)
        viewsByName["FootL"] = footL

        let footR = UIImageView()
        footR.bounds = CGRect(x:0, y:0, width:464.0, height:406.0)
        footR.image = UIImage(named: "Foot")
        footR.contentMode = .Center
        footR.layer.position = CGPoint(x:282.175, y:278.153)
        footR.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(3.14), -0.14, -0.14)
        dancingAnimal.addSubview(footR)
        viewsByName["FootR"] = footR

        let largeBody = UIImageView()
        largeBody.bounds = CGRect(x:0, y:0, width:1178.0, height:978.0)
        largeBody.layer.anchorPoint = CGPoint(x:0.497, y:0.481)

        largeBody.image = UIImage(named: "LargeBody")
        largeBody.contentMode = .Center
        largeBody.layer.position = CGPoint(x:249.257, y:185.372)
        largeBody.transform = CGAffineTransformMakeScale(0.19, 0.19)
        dancingAnimal.addSubview(largeBody)
        viewsByName["LargeBody"] = largeBody

        let head = UIImageView()
        head.bounds = CGRect(x:0, y:0, width:80.0, height:80.0)
        head.image = getHeadImageFor(animal)
        head.contentMode = .Center
        head.layer.position = CGPoint(x:251.000, y:99.182)
        head.transform = CGAffineTransformMakeScale(2.78, 2.78)
        dancingAnimal.addSubview(head)
        viewsByName["Lion"] = head
        return viewsByName
    }



	func setupHierarchy() {
        getRandomAnimal()
        fullCrate = UIView()
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1136, height:768)
		__scaling__.center = CGPoint(x:568.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		fullCrate.bounds = CGRect(x:0, y:0, width:528.7, height:528.0)
		fullCrate.layer.position = CGPoint(x:652.918, y:400.078)
		__scaling__.addSubview(fullCrate)
		viewsByName["fullCrate"] = fullCrate
		let opencrate = UIImageView()
		opencrate.bounds = CGRect(x:0, y:0, width:527.0, height:528.0)
		var imgOpencrate: UIImage!
		if let imagePath = bundle.pathForResource("Opencrate.png", ofType:nil) {
			imgOpencrate = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Opencrate.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		opencrate.image = imgOpencrate
		opencrate.contentMode = .Center
		opencrate.layer.position = CGPoint(x:265.242, y:264.000)
		fullCrate.addSubview(opencrate)
		viewsByName["Opencrate"] = opencrate

        setupDancingAnimal(viewsByName).flatMap{ viewsByName[$0] = $1 }
        fullCrate.addSubview(dancingAnimal)
        let door = UIImageView()
		door.bounds = CGRect(x:0, y:0, width:511.0, height:497.0)
		door.layer.anchorPoint = CGPoint(x:-0.003, y:0.500)
		var imgDoor: UIImage!
		if let imagePath = bundle.pathForResource("Door.png", ofType:nil) {
			imgDoor = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Door.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		door.image = imgDoor
		door.contentMode = .Center
		door.layer.position = CGPoint(x:-1.711, y:271.598)
		fullCrate.addSubview(door)
		viewsByName["Door"] = door

		self.viewsByName = viewsByName
	}

	// - MARK: Close

	func addCloseAnimation() {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseAnimation(completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let anticipateTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 1.00, 1.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Close")
			self.animationCompletions[layer.animationForKey("Close")!] = complete
		}

		let doorScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		doorScaleXAnimation.duration = 0.500
		doorScaleXAnimation.values = [-0.292 as Float, 0.999 as Float]
		doorScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorScaleXAnimation.timingFunctions = [anticipateTiming]
		doorScaleXAnimation.beginTime = beginTime
		doorScaleXAnimation.fillMode = fillMode
		doorScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorScaleXAnimation, forKey:"Close_ScaleX")

		let doorTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		doorTranslationXAnimation.duration = 0.500
		doorTranslationXAnimation.values = [2.211 as Float, 0.001 as Float]
		doorTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorTranslationXAnimation.timingFunctions = [anticOverTiming]
		doorTranslationXAnimation.beginTime = beginTime
		doorTranslationXAnimation.fillMode = fillMode
		doorTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorTranslationXAnimation, forKey:"Close_TranslationX")
	}

	func removeCloseAnimation() {
		self.layer.removeAnimationForKey("Close")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Close_ScaleX")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Close_TranslationX")
	}

	// - MARK: Open

	func addOpenAnimation() {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
        addStandingAnimation()
	}

	func addOpenAnimation(completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
        addStandingAnimation()
	}

	func addOpenAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addOpenAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addOpenAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Open")
			self.animationCompletions[layer.animationForKey("Open")!] = complete
		}

		let doorScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		doorScaleXAnimation.duration = 0.500
		doorScaleXAnimation.values = [1.000 as Float, -0.292 as Float]
		doorScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorScaleXAnimation.timingFunctions = [overshootTiming]
		doorScaleXAnimation.beginTime = beginTime
		doorScaleXAnimation.fillMode = fillMode
		doorScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorScaleXAnimation, forKey:"Open_ScaleX")

		let doorTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		doorTranslationXAnimation.duration = 0.500
		doorTranslationXAnimation.values = [0.000 as Float, 2.211 as Float]
		doorTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		doorTranslationXAnimation.timingFunctions = [easeInOutTiming]
		doorTranslationXAnimation.beginTime = beginTime
		doorTranslationXAnimation.fillMode = fillMode
		doorTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Door"]?.layer.addAnimation(doorTranslationXAnimation, forKey:"Open_TranslationX")
	}

	func removeOpenAnimation() {
		self.layer.removeAnimationForKey("Open")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Open_ScaleX")
		self.viewsByName["Door"]?.layer.removeAnimationForKey("Open_TranslationX")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Close")
		self.layer.removeAnimationForKey("Open")
	}

    // - MARK: Standing

    func addStandingAnimation() {
        addStandingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
    }

    func addStandingAnimation(removedOnCompletion removedOnCompletion: Bool) {
        addStandingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
    }

    func addStandingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)

        let footRTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        footRTranslationYAnimation.duration = 1.150
        footRTranslationYAnimation.values = [0.000 as Float, -10.000 as Float, 0.000 as Float]
        footRTranslationYAnimation.keyTimes = [0.000 as Float, 0.348 as Float, 1.000 as Float]
        footRTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        footRTranslationYAnimation.repeatCount = HUGE
        footRTranslationYAnimation.beginTime = beginTime
        footRTranslationYAnimation.fillMode = fillMode
        footRTranslationYAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["FootR"]?.layer.addAnimation(footRTranslationYAnimation, forKey:"Standing_TranslationY")

        let largeBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        largeBodyRotationAnimation.duration = 0.950
        largeBodyRotationAnimation.values = [0.000 as Float, 0.000 as Float, -0.035 as Float, -0.002 as Float]
        largeBodyRotationAnimation.keyTimes = [0.000 as Float, 0.174 as Float, 0.526 as Float, 1.000 as Float]
        largeBodyRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        largeBodyRotationAnimation.repeatCount = HUGE
        largeBodyRotationAnimation.beginTime = beginTime
        largeBodyRotationAnimation.fillMode = fillMode
        largeBodyRotationAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyRotationAnimation, forKey:"Standing_Rotation")

        let largeBodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        largeBodyTranslationXAnimation.duration = 0.500
        largeBodyTranslationXAnimation.values = [0.000 as Float, 0.198 as Float, -1.000 as Float]
        largeBodyTranslationXAnimation.keyTimes = [0.000 as Float, 0.802 as Float, 1.000 as Float]
        largeBodyTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
        largeBodyTranslationXAnimation.repeatCount = HUGE
        largeBodyTranslationXAnimation.beginTime = beginTime
        largeBodyTranslationXAnimation.fillMode = fillMode
        largeBodyTranslationXAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyTranslationXAnimation, forKey:"Standing_TranslationX")

        let largeBodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        largeBodyTranslationYAnimation.duration = 1.000
        largeBodyTranslationYAnimation.values = [0.000 as Float, -3.010 as Float, -5.000 as Float, 0.000 as Float]
        largeBodyTranslationYAnimation.keyTimes = [0.000 as Float, 0.290 as Float, 0.500 as Float, 1.000 as Float]
        largeBodyTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        largeBodyTranslationYAnimation.repeatCount = HUGE
        largeBodyTranslationYAnimation.beginTime = beginTime
        largeBodyTranslationYAnimation.fillMode = fillMode
        largeBodyTranslationYAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["LargeBody"]?.layer.addAnimation(largeBodyTranslationYAnimation, forKey:"Standing_TranslationY")

        let lionRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        lionRotationAnimation.duration = 0.700
        lionRotationAnimation.values = [0.000 as Float, 0.004 as Float, -0.020 as Float, 0.004 as Float]
        lionRotationAnimation.keyTimes = [0.000 as Float, 0.537 as Float, 0.757 as Float, 1.000 as Float]
        lionRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        lionRotationAnimation.repeatCount = HUGE
        lionRotationAnimation.beginTime = beginTime
        lionRotationAnimation.fillMode = fillMode
        lionRotationAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["Lion"]?.layer.addAnimation(lionRotationAnimation, forKey:"Standing_Rotation")

        let lionTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        lionTranslationXAnimation.duration = 0.680
        lionTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -1.000 as Float, 0.000 as Float]
        lionTranslationXAnimation.keyTimes = [0.000 as Float, 0.590 as Float, 0.779 as Float, 1.000 as Float]
        lionTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        lionTranslationXAnimation.repeatCount = HUGE
        lionTranslationXAnimation.beginTime = beginTime
        lionTranslationXAnimation.fillMode = fillMode
        lionTranslationXAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["Lion"]?.layer.addAnimation(lionTranslationXAnimation, forKey:"Standing_TranslationX")

        let lionTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        lionTranslationYAnimation.duration = 0.680
        lionTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, -2.000 as Float, 0.000 as Float]
        lionTranslationYAnimation.keyTimes = [0.000 as Float, 0.590 as Float, 0.779 as Float, 1.000 as Float]
        lionTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        lionTranslationYAnimation.repeatCount = HUGE
        lionTranslationYAnimation.beginTime = beginTime
        lionTranslationYAnimation.fillMode = fillMode
        lionTranslationYAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["Lion"]?.layer.addAnimation(lionTranslationYAnimation, forKey:"Standing_TranslationY")
    }

    func removeStandingAnimation() {
        self.viewsByName["FootR"]?.layer.removeAnimationForKey("Standing_TranslationY")
        self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_Rotation")
        self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_TranslationX")
        self.viewsByName["LargeBody"]?.layer.removeAnimationForKey("Standing_TranslationY")
        self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_Rotation")
        self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_TranslationX")
        self.viewsByName["Lion"]?.layer.removeAnimationForKey("Standing_TranslationY")
        self.animal = getRandomAnimal()
    }

}
